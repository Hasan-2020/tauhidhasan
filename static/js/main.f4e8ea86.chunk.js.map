{"version":3,"sources":["Components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["cards","props","className","person","name","age","children","App","state","heading","changeNameHandler","setState","onClick","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAeeA,G,YAZD,SAACC,GACd,OACC,yBAAKC,UAAU,SACd,4BAAKD,EAAME,OAAX,KACA,uCACUF,EAAMG,KADhB,cACiCH,EAAMI,IADvC,cAGA,2BAAIJ,EAAMK,aC2CEC,E,4MAhDdC,MAAQ,CACPR,MAAO,CACN,CAAEI,KAAM,eAAgBC,IAAK,GAAII,QAAS,UAC1C,CAAEL,KAAM,uBAAkBC,IAAK,GAAII,QAAS,UAC5C,CAAEL,KAAM,iBAAeC,IAAK,GAAII,QAAS,UACzC,CAAEL,KAAM,iBAAaC,IAAK,GAAII,QAAS,UACvC,CAAEL,KAAM,yBAAgBC,IAAK,GAAII,QAAS,Y,EAI5CC,kBAAoB,WACnB,EAAKC,SAAS,CACbX,MAAO,CACN,CAAEI,KAAM,eAAgBC,IAAK,GAAII,QAAS,UAC1C,CAAEL,KAAM,iBAAeC,IAAK,GAAII,QAAS,SACzC,CAAEL,KAAM,eAAgBC,IAAK,GAAII,QAAS,SAC1C,CAAEL,KAAM,gBAAiBC,IAAK,GAAII,QAAS,eAC3C,CAAEL,KAAM,yBAAkBC,IAAK,GAAII,QAAS,c,uDAM9C,OACC,yBAAKP,UAAU,QACd,4BAAQU,QAASC,KAAKH,mBAAtB,eACA,yBAAKR,UAAU,OACd,kBAAC,EAAD,CAAOC,OAAQU,KAAKL,MAAMR,MAAM,GAAGS,QAASL,KAAMS,KAAKL,MAAMR,MAAM,GAAGI,KAAMC,IAAKQ,KAAKL,MAAMR,MAAM,GAAGK,KAArG,0BAGA,kBAAC,EAAD,CAAOF,OAAQU,KAAKL,MAAMR,MAAM,GAAGS,QAASL,KAAMS,KAAKL,MAAMR,MAAM,GAAGI,KAAMC,IAAKQ,KAAKL,MAAMR,MAAM,GAAGK,KAArG,uBAGA,kBAAC,EAAD,CAAOF,OAAQU,KAAKL,MAAMR,MAAM,GAAGS,QAASL,KAAMS,KAAKL,MAAMR,MAAM,GAAGI,KAAMC,IAAKQ,KAAKL,MAAMR,MAAM,GAAGK,KAArG,2BAGA,kBAAC,EAAD,CAAOF,OAAQU,KAAKL,MAAMR,MAAM,GAAGS,QAASL,KAAMS,KAAKL,MAAMR,MAAM,GAAGI,KAAMC,IAAKQ,KAAKL,MAAMR,MAAM,GAAGK,KAArG,wBAGA,kBAAC,EAAD,CAAOF,OAAQU,KAAKL,MAAMR,MAAM,GAAGS,QAASL,KAAMS,KAAKL,MAAMR,MAAM,GAAGI,KAAMC,IAAKQ,KAAKL,MAAMR,MAAM,GAAGK,KAArG,+B,GAxCaS,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f4e8ea86.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Cards.css\";\r\n\r\nconst cards = (props) => {\r\n\treturn (\r\n\t\t<div className=\"Cards\">\r\n\t\t\t<h1>{props.person} </h1>\r\n\t\t\t<h3>\r\n\t\t\t\tThis is {props.name} and he is {props.age} years old\r\n\t\t\t</h3>\r\n\t\t\t<p>{props.children}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default cards;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Cards from \"./Components/Cards\";\n\nclass App extends Component {\n\tstate = {\n\t\tcards: [\n\t\t\t{ name: \"Tauhid Hasan\", age: 28, heading: \"Person\" },\n\t\t\t{ name: \"Yakup Akgöçmen\", age: 25, heading: \"Person\" },\n\t\t\t{ name: \"Yusuf Çelik\", age: 32, heading: \"Person\" },\n\t\t\t{ name: \"Ali Tuğay\", age: 45, heading: \"Person\" },\n\t\t\t{ name: \"Hızır Ekinci\", age: 55, heading: \"Person\" },\n\t\t],\n\t};\n\n\tchangeNameHandler = () => {\n\t\tthis.setState({\n\t\t\tcards: [\n\t\t\t\t{ name: \"Mehedi Hasan\", age: 25, heading: \"MEHEDI\" },\n\t\t\t\t{ name: \"Leyla Çelik\", age: 30, heading: \"LEYLA\" },\n\t\t\t\t{ name: \"Ercan Kartal\", age: 40, heading: \"ERCAN\" },\n\t\t\t\t{ name: \"Hikmet Arslan\", age: 50, heading: \"HİKMET\" },\n\t\t\t\t{ name: \"Mehmet Özyiğit\", age: 60, heading: \"MEHMET\" },\n\t\t\t],\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Body\">\n\t\t\t\t<button onClick={this.changeNameHandler}>Change Name</button>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Cards person={this.state.cards[0].heading} name={this.state.cards[0].name} age={this.state.cards[0].age}>\n\t\t\t\t\t\tMy hobbies: Travelling\n\t\t\t\t\t</Cards>\n\t\t\t\t\t<Cards person={this.state.cards[1].heading} name={this.state.cards[1].name} age={this.state.cards[1].age}>\n\t\t\t\t\t\tMy hobbies: Cycling\n\t\t\t\t\t</Cards>\n\t\t\t\t\t<Cards person={this.state.cards[2].heading} name={this.state.cards[2].name} age={this.state.cards[2].age}>\n\t\t\t\t\t\tMy hobbies: Paragliding\n\t\t\t\t\t</Cards>\n\t\t\t\t\t<Cards person={this.state.cards[3].heading} name={this.state.cards[3].name} age={this.state.cards[3].age}>\n\t\t\t\t\t\tMy hobbies: Football\n\t\t\t\t\t</Cards>\n\t\t\t\t\t<Cards person={this.state.cards[4].heading} name={this.state.cards[4].name} age={this.state.cards[4].age}>\n\t\t\t\t\t\tMy hobbies: sketching\n\t\t\t\t\t</Cards>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}